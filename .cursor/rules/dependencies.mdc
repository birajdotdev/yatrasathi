---
description: 
globs: 
alwaysApply: false
---
# YatraSathi Project Dependencies

This rule provides information about all available packages in the project, helping Cursor AI generate more accurate code.

## Naming Conventions
- Use kebab-case for file names (e.g., `user-profile.tsx`, `use-auth.ts`)
- Use PascalCase for component names (e.g., `export function UserProfile()`)
- Use snake_case for database columns and tables

## Core Dependencies

### Next.js Ecosystem
- `next`: Next.js 15+ framework with App Router and React Server Components
- `react`: React 19 for building user interfaces
- `react-dom`: React DOM for web applications
- `next-themes`: Theme management for Next.js applications
- `@vercel/analytics`: Analytics for Vercel-deployed applications
- `@vercel/speed-insights`: Performance monitoring for Vercel-deployed applications

### UI Components
- `@radix-ui/react-*`: Collection of accessible, unstyled UI primitives
  - `accordion`: Collapsible content sections
  - `alert-dialog`: Modal dialogs for critical actions
  - `avatar`: User profile images
  - `dialog`: Modal dialog windows
  - `dropdown-menu`: Dropdown menus
  - `label`: Form labels
  - `popover`: Floating content panels
  - `progress`: Progress indicators
  - `scroll-area`: Custom scrollable areas
  - `select`: Custom select menus
  - `separator`: Visual separators
  - `slot`: Component composition tool
  - `switch`: Toggle inputs
  - `tabs`: Tabbed interfaces
  - `tooltip`: Contextual information popups
- `cmdk`: Command menu interface (Command K)
- `sonner`: Modern toast notifications
- `react-day-picker`: Date picker component

### Styling and Animation
- `tailwindcss`: Utility-first CSS framework
- `class-variance-authority`: Component variant management
- `tailwind-merge`: Merge Tailwind CSS classes without conflicts
- `tailwindcss-animate`: Animation utilities for Tailwind
- `clsx`: Conditionally joining classNames
- `motion`: Animation library for React

### Authentication
- `@clerk/nextjs`: Clerk authentication for Next.js
- `@clerk/themes`: Theming for Clerk components
- `svix`: Webhook verification for Clerk

### Data Management
- `@trpc/client`: tRPC client for type-safe APIs
- `@trpc/next`: tRPC integration with Next.js
- `@trpc/react-query`: tRPC with React Query
- `@trpc/server`: tRPC server implementation
- `@tanstack/react-query`: Data fetching and caching
- `@tanstack/react-query-devtools`: Developer tools for React Query
- `drizzle-orm`: TypeScript ORM for SQL databases
- `drizzle-zod`: Zod integration for Drizzle ORM
- `postgres`: PostgreSQL client for Node.js
- `superjson`: JSON serialization with support for complex data types
- `zod`: TypeScript-first schema validation

### Forms
- `react-hook-form`: Form state management
- `@hookform/resolvers`: Schema validation for react-hook-form

### File Upload
- `uploadthing`: File uploading service
- `@uploadthing/react`: React components for uploadthing
- `unsplash-js`: Unsplash API client

### AI Features
- `ai`: AI SDK for building AI-powered applications
- `@ai-sdk/google`: Google AI integration

### Utilities
- `date-fns`: Date manipulation library
- `lucide-react`: Icon library
- `use-debounce`: Debounce hooks for React
- `react-error-boundary`: Error boundaries for React
- `@t3-oss/env-nextjs`: Type-safe environment variables

## Development Dependencies

### TypeScript
- `typescript`: JavaScript with syntax for types
- `@types/react`: TypeScript types for React
- `@types/react-dom`: TypeScript types for React DOM
- `@types/node`: TypeScript types for Node.js

### Linting and Formatting
- `eslint`: JavaScript and TypeScript linter
- `eslint-config-next`: ESLint configuration for Next.js
- `eslint-config-prettier`: ESLint configuration for Prettier
- `eslint-plugin-check-file`: ESLint plugin for file naming conventions
- `eslint-plugin-drizzle`: ESLint plugin for Drizzle ORM
- `prettier`: Code formatter
- `prettier-plugin-tailwindcss`: Prettier plugin for Tailwind CSS
- `@trivago/prettier-plugin-sort-imports`: Prettier plugin for sorting imports
- `typescript-eslint`: ESLint plugin for TypeScript
- `@eslint/js`: ESLint JavaScript configuration
- `@eslint/eslintrc`: ESLint configuration utilities

### Database Tools
- `drizzle-kit`: CLI tools for Drizzle ORM

### Build and Post-Processing
- `@tailwindcss/postcss`: PostCSS configuration for Tailwind CSS
- `postcss`: Tool for transforming CSS with JavaScript

## Implementation Guidelines

When implementing features, prefer using the libraries already available in the project:

1. For UI components, use Radix UI primitives styled with Tailwind CSS
2. For data fetching, use tRPC with React Query
3. For forms, use react-hook-form with zod validation
4. For authentication, use Clerk components and hooks
5. For database operations, use Drizzle ORM
6. For file uploads, use the uploadthing components

Avoid adding new dependencies unless absolutely necessary. If you need functionality not provided by existing libraries, check if it can be implemented using the current stack before introducing new dependencies.
