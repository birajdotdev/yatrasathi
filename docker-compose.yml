services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro,Z
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /app
    restart: unless-stopped
    expose:
      - "3000"
    image: yatrasathi-app
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}
      UPSTASH_REDIS_REST_URL: http://serverless-redis-http
    env_file:
      - .env
    depends_on:
      - db
      - ngrok
      - serverless-redis-http
    networks:
      - app-network

  db:
    image: postgres:17
    command: "-d 1"
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    networks:
      - app-network

  redis:
    image: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  serverless-redis-http:
    ports:
      - "8079:80"
    image: hiett/serverless-redis-http:latest
    environment:
      SRH_MODE: env
      SRH_TOKEN: ${UPSTASH_REDIS_REST_TOKEN}
      SRH_CONNECTION_STRING: "redis://redis:6379"
    depends_on:
      - redis
    networks:
      - app-network

  ngrok:
    image: ngrok/ngrok:latest
    ports:
      - "4040:4040"
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
    command: "http host.docker.internal:3000 --domain=${NGROK_DOMAIN} --log=stdout"
    network_mode: "bridge"
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
